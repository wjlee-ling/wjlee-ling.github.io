#collapse-hide
# colab에서 실행할 시 준비과정
%cd "/content/drive/MyDrive/Colab Notebooks/nlp/a2/"

#hide
#dataset 다운로드
!bash get_datasets.sh

# collapse-show
# word2vec.py
def naiveSoftmaxLossAndGradient(
    centerWordVec,
    outsideWordIdx,
    outsideVectors,
    dataset
):
    """ Naive Softmax loss & gradient function for word2vec models

    Implement the naive softmax loss and gradients between a center word's 
    embedding and an outside word's embedding. This will be the building block
    for our word2vec models. For those unfamiliar with numpy notation, note 
    that a numpy ndarray with a shape of (x, ) is a one-dimensional array, which
    you can effectively treat as a vector with length x.

    Arguments:
    centerWordVec -- numpy ndarray, center word's embedding
                    in shape (word vector length, )
                    (v_c in the pdf handout)
    outsideWordIdx -- integer, the index of the outside word
                    (o of u_o in the pdf handout)
    outsideVectors -- outside vectors is
                    in shape (num words in vocab, word vector length) 
                    for all words in vocab (tranpose of U in the pdf handout)
    dataset -- needed for negative sampling, unused here.

    Return:
    loss -- naive softmax loss
    gradCenterVec -- the gradient with respect to the center word vector
                     in shape (word vector length, )
                     (dJ / dv_c in the pdf handout)
    gradOutsideVecs -- the gradient with respect to all the outside word vectors
                    in shape (num words in vocab, word vector length) 
                    (dJ / dU)
    """

    ### YOUR CODE HERE (~6-8 Lines)

    ### Please use the provided softmax function (imported earlier in this file)
    ### This numerically stable implementation helps you avoid issues pertaining
    ### to integer overflow. 

    inner = np.dot(outsideVectors, centerWordVec) # (N,D) @ (D,) -> (N,)
    prob = softmax(inner)[:, np.newaxis] # (N,) -> (N,1)

    loss = - np.log(prob[outsideWordIdx])

    outsideVector = outsideVectors[outsideWordIdx]
    gradCenterVec = np.sum(outsideVectors * prob, axis=0) - outsideVector

    gradOutsideVecs = np.dot(prob, centerWordVec[:, np.newaxis].T)
    gradOutsideVecs[outsideWordIdx] -= centerWordVec
    ### END YOUR CODE

    return loss, gradCenterVec, gradOutsideVecs

#hide
!python word2vec.py naiveSoftmaxLossAndGradient

def negSamplingLossAndGradient(
    centerWordVec,
    outsideWordIdx,
    outsideVectors,
    dataset,
    K=10
):
    """ Negative sampling loss function for word2vec models

    Implement the negative sampling loss and gradients for a centerWordVec
    and a outsideWordIdx word vector as a building block for word2vec
    models. K is the number of negative samples to take.

    Note: The same word may be negatively sampled multiple times. For
    example if an outside word is sampled twice, you shall have to
    double count the gradient with respect to this word. Thrice if
    it was sampled three times, and so forth.

    Arguments/Return Specifications: same as naiveSoftmaxLossAndGradient
    """

    # Negative sampling of words is done for you. Do not modify this if you
    # wish to match the autograder and receive points!
    negSampleWordIndices = getNegativeSamples(outsideWordIdx, dataset, K)
    indices = [outsideWordIdx] + negSampleWordIndices

    ### YOUR CODE HERE (~10 Lines)

    ### Please use your implementation of sigmoid in here.
    gradOutsideVecs = np.zeros(outsideVectors.shape) # (V, D)
    z = np.dot(outsideVectors[outsideWordIdx], centerWordVec) # (D,) @ (D,) -> 1 
    probs = sigmoid(z) # plain skip-gram에서는 softmax

    loss = - np.log(probs)
    gradCenterVec = (probs-1) * outsideVectors[outsideWordIdx] 
    gradOutsideVecs[outsideWordIdx] = (probs-1.) * centerWordVec # (D,); update gradient of the context vector for the positive pair

    for i in range(K):
        idx = negSampleWordIndices[i]
        probs_neg = sigmoid(-np.dot(outsideVectors[idx], centerWordVec))
        loss -= np.log(probs_neg)
        gradCenterVec -= (probs_neg-1) * outsideVectors[idx]
        gradOutsideVecs[idx] += (1-probs_neg) * centerWordVec # update gradient of the context vector for each positive pair

    ### END YOUR CODE

    return loss, gradCenterVec, gradOutsideVecs

#hide
!python word2vec.py negSamplingLossAndGradient

#hide
!python word2vec.py skipgram
